<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_controller" kind="class" language="C++" prot="public">
    <compoundname>Controller</compoundname>
    <derivedcompoundref refid="class_ping_controller" prot="public" virt="non-virtual">PingController</derivedcompoundref>
    <derivedcompoundref refid="class_tracks_controller" prot="public" virt="non-virtual">TracksController</derivedcompoundref>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_controller_1a8f3775d9453ff7db9e88781bcffbae95" prot="protected" static="no" mutable="no">
        <type>std::map&lt; std::string, RequestHandlerBase * &gt;</type>
        <definition>std::map&lt;std::string, RequestHandlerBase *&gt; Controller::routes</definition>
        <argsstring></argsstring>
        <name>routes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/api/controllers/Controller.h" line="58" column="1" bodyfile="src/api/controllers/Controller.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_controller_1acbabc355661618f30e04c613ae8b3340" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; Controller::urls</definition>
        <argsstring></argsstring>
        <name>urls</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/api/controllers/Controller.h" line="59" column="1" bodyfile="src/api/controllers/Controller.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_controller_1a95c56822d667e94b031451729ce069a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Controller::Controller</definition>
        <argsstring>()</argsstring>
        <name>Controller</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_controller" kindref="compound">Controller</ref> constructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/api/controllers/Controller.h" line="19" column="1" bodyfile="src/api/controllers/Controller.cpp" bodystart="8" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="class_controller_1a0ab87934c4f7a266cfdb86e0f36bc1b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>Controller::~Controller</definition>
        <argsstring>()</argsstring>
        <name>~Controller</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_controller" kindref="compound">Controller</ref> destroyer </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/api/controllers/Controller.h" line="24" column="1" bodyfile="src/api/controllers/Controller.cpp" bodystart="12" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="class_controller_1afa78a73d099dc2920b22b2927f7870d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_response" kindref="compound">Response</ref> *</type>
        <definition>Response * Controller::process</definition>
        <argsstring>(Request &amp;request)</argsstring>
        <name>process</name>
        <param>
          <type><ref refid="class_request" kindref="compound">Request</ref> &amp;</type>
          <declname>request</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>processes passed request gets the corresponding method from its routes and calls method <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>the request to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>built response, with status code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/api/controllers/Controller.h" line="32" column="1" bodyfile="src/api/controllers/Controller.cpp" bodystart="22" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_controller_1a53ed1daa58f8458d71a5526e6fe6fcb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_response" kindref="compound">Response</ref> *</type>
        <definition>Response * Controller::serverInternalError</definition>
        <argsstring>(std::string message)</argsstring>
        <name>serverInternalError</name>
        <param>
          <type>std::string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepares 500 error in case of error during process <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>error response message </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>500 status code response </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/api/controllers/Controller.h" line="39" column="1" bodyfile="src/api/controllers/Controller.cpp" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="class_controller_1abe812429430dca0aae5b09b4b304af26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Controller::addRoute</definition>
        <argsstring>(std::string httpVerb, std::string route, RequestHandlerBase *handler)</argsstring>
        <name>addRoute</name>
        <param>
          <type>std::string</type>
          <declname>httpVerb</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>route</declname>
        </param>
        <param>
          <type>RequestHandlerBase *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds route to controller&apos;s routes map. Mongoose&apos;s requesthandlerbase does the mapping <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>httpVerb</parametername>
</parameternamelist>
<parameterdescription>
<para>one of GET/POST/PUT/DELETE </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>route</parametername>
</parameternamelist>
<parameterdescription>
<para>route to handle. ex: /tracks </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Mongoose&apos;s request handler </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/api/controllers/Controller.h" line="47" column="1" bodyfile="src/api/controllers/Controller.cpp" bodystart="41" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_controller_1a0c8c0a4a4e853a3b33c1afcf55795f51" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Controller::handles</definition>
        <argsstring>(std::string method, std::string url)</argsstring>
        <name>handles</name>
        <param>
          <type>std::string</type>
          <declname>method</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>url</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if controller handles the given url <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>one of GET/POST/PUT/DELETE </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>the one to verify. ex: /ping </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if it handles, false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/api/controllers/Controller.h" line="55" column="1" bodyfile="src/api/controllers/Controller.cpp" bodystart="47" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>TracksController</label>
        <link refid="class_tracks_controller"/>
        <childnode refid="0" relation="public-inheritance">
        </childnode>
      </node>
      <node id="0">
        <label>Controller</label>
        <link refid="class_controller"/>
      </node>
      <node id="1">
        <label>PingController</label>
        <link refid="class_ping_controller"/>
        <childnode refid="0" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="src/api/controllers/Controller.h" line="14" column="1" bodyfile="src/api/controllers/Controller.h" bodystart="14" bodyend="60"/>
    <listofallmembers>
      <member refid="class_controller_1abe812429430dca0aae5b09b4b304af26" prot="public" virt="non-virtual"><scope>Controller</scope><name>addRoute</name></member>
      <member refid="class_controller_1a95c56822d667e94b031451729ce069a9" prot="public" virt="non-virtual"><scope>Controller</scope><name>Controller</name></member>
      <member refid="class_controller_1a0c8c0a4a4e853a3b33c1afcf55795f51" prot="public" virt="virtual"><scope>Controller</scope><name>handles</name></member>
      <member refid="class_controller_1afa78a73d099dc2920b22b2927f7870d6" prot="public" virt="virtual"><scope>Controller</scope><name>process</name></member>
      <member refid="class_controller_1a8f3775d9453ff7db9e88781bcffbae95" prot="protected" virt="non-virtual"><scope>Controller</scope><name>routes</name></member>
      <member refid="class_controller_1a53ed1daa58f8458d71a5526e6fe6fcb6" prot="public" virt="non-virtual"><scope>Controller</scope><name>serverInternalError</name></member>
      <member refid="class_controller_1acbabc355661618f30e04c613ae8b3340" prot="protected" virt="non-virtual"><scope>Controller</scope><name>urls</name></member>
      <member refid="class_controller_1a0ab87934c4f7a266cfdb86e0f36bc1b5" prot="public" virt="virtual"><scope>Controller</scope><name>~Controller</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
